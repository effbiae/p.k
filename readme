
under growler/k, p.k provides

 w:  lexer               extended from ktye/i/p.k
 p:  parse expression    extended from atw [1]
 pf: parse file

TODO

  error reporting -- p fails quietly on bad input


$ make  #runs u.k to unparse itself and check it works


[1]
c:@[127#" ";("['/\\";":+-*%!&|<>=~,^#_$?@.";";)] ");"av;"]
n:{s -1+i+:1};q:{";"=c s i}
E:{|/ ";[("=n`}{e t`}\
t:{$[q`;;{"a"=c s i}{$["["=s i;E x;(n`;x)]}/$[~"("=s i;n`;3>#x: \E s i;x 1;x]]}
e:{v:{";"<c s i-1};$[q`;x;v[f:t`]>v`;(f;x;e t`);(x;e f)]}
p:{i::0;t s::"(",x}
p'x:("x;y";"(x;y)";"f[x;y]";"x+y";"x+*y";"1+3*x";"(+x)%y";"(+/x)%#x";"x+m[*i]/y")

